// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/utilitywarehouse/terraform-applier/metrics (interfaces: PrometheusInterface)

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrometheusInterface is a mock of PrometheusInterface interface.
type MockPrometheusInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusInterfaceMockRecorder
}

// MockPrometheusInterfaceMockRecorder is the mock recorder for MockPrometheusInterface.
type MockPrometheusInterfaceMockRecorder struct {
	mock *MockPrometheusInterface
}

// NewMockPrometheusInterface creates a new mock instance.
func NewMockPrometheusInterface(ctrl *gomock.Controller) *MockPrometheusInterface {
	mock := &MockPrometheusInterface{ctrl: ctrl}
	mock.recorder = &MockPrometheusInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusInterface) EXPECT() *MockPrometheusInterfaceMockRecorder {
	return m.recorder
}

// DecRunningModuleCount mocks base method.
func (m *MockPrometheusInterface) DecRunningModuleCount(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecRunningModuleCount", arg0)
}

// DecRunningModuleCount indicates an expected call of DecRunningModuleCount.
func (mr *MockPrometheusInterfaceMockRecorder) DecRunningModuleCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecRunningModuleCount", reflect.TypeOf((*MockPrometheusInterface)(nil).DecRunningModuleCount), arg0)
}

// IncRunningModuleCount mocks base method.
func (m *MockPrometheusInterface) IncRunningModuleCount(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncRunningModuleCount", arg0)
}

// IncRunningModuleCount indicates an expected call of IncRunningModuleCount.
func (mr *MockPrometheusInterfaceMockRecorder) IncRunningModuleCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncRunningModuleCount", reflect.TypeOf((*MockPrometheusInterface)(nil).IncRunningModuleCount), arg0)
}

// UpdateModuleRunDuration mocks base method.
func (m *MockPrometheusInterface) UpdateModuleRunDuration(arg0, arg1 string, arg2 float64, arg3 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateModuleRunDuration", arg0, arg1, arg2, arg3)
}

// UpdateModuleRunDuration indicates an expected call of UpdateModuleRunDuration.
func (mr *MockPrometheusInterfaceMockRecorder) UpdateModuleRunDuration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModuleRunDuration", reflect.TypeOf((*MockPrometheusInterface)(nil).UpdateModuleRunDuration), arg0, arg1, arg2, arg3)
}

// UpdateModuleSuccess mocks base method.
func (m *MockPrometheusInterface) UpdateModuleSuccess(arg0, arg1 string, arg2 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateModuleSuccess", arg0, arg1, arg2)
}

// UpdateModuleSuccess indicates an expected call of UpdateModuleSuccess.
func (mr *MockPrometheusInterfaceMockRecorder) UpdateModuleSuccess(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModuleSuccess", reflect.TypeOf((*MockPrometheusInterface)(nil).UpdateModuleSuccess), arg0, arg1, arg2)
}

// UpdateTerraformExitCodeCount mocks base method.
func (m *MockPrometheusInterface) UpdateTerraformExitCodeCount(arg0, arg1, arg2 string, arg3 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTerraformExitCodeCount", arg0, arg1, arg2, arg3)
}

// UpdateTerraformExitCodeCount indicates an expected call of UpdateTerraformExitCodeCount.
func (mr *MockPrometheusInterfaceMockRecorder) UpdateTerraformExitCodeCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTerraformExitCodeCount", reflect.TypeOf((*MockPrometheusInterface)(nil).UpdateTerraformExitCodeCount), arg0, arg1, arg2, arg3)
}
