// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/utilitywarehouse/terraform-applier/sysutil (interfaces: RedisInterface)

// Package sysutil is a generated GoMock package.
package sysutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/utilitywarehouse/terraform-applier/api/v1beta1"
	types "k8s.io/apimachinery/pkg/types"
)

// MockRedisInterface is a mock of RedisInterface interface.
type MockRedisInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisInterfaceMockRecorder
}

// MockRedisInterfaceMockRecorder is the mock recorder for MockRedisInterface.
type MockRedisInterfaceMockRecorder struct {
	mock *MockRedisInterface
}

// NewMockRedisInterface creates a new mock instance.
func NewMockRedisInterface(ctrl *gomock.Controller) *MockRedisInterface {
	mock := &MockRedisInterface{ctrl: ctrl}
	mock.recorder = &MockRedisInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisInterface) EXPECT() *MockRedisInterfaceMockRecorder {
	return m.recorder
}

// AllRuns mocks base method.
func (m *MockRedisInterface) AllRuns(arg0 context.Context, arg1 types.NamespacedName) ([]*v1beta1.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRuns", arg0, arg1)
	ret0, _ := ret[0].([]*v1beta1.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRuns indicates an expected call of AllRuns.
func (mr *MockRedisInterfaceMockRecorder) AllRuns(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRuns", reflect.TypeOf((*MockRedisInterface)(nil).AllRuns), arg0, arg1)
}

// DefaultApply mocks base method.
func (m *MockRedisInterface) DefaultApply(arg0 context.Context, arg1 types.NamespacedName) (*v1beta1.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultApply", arg0, arg1)
	ret0, _ := ret[0].(*v1beta1.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultApply indicates an expected call of DefaultApply.
func (mr *MockRedisInterfaceMockRecorder) DefaultApply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultApply", reflect.TypeOf((*MockRedisInterface)(nil).DefaultApply), arg0, arg1)
}

// DefaultLastRun mocks base method.
func (m *MockRedisInterface) DefaultLastRun(arg0 context.Context, arg1 types.NamespacedName) (*v1beta1.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultLastRun", arg0, arg1)
	ret0, _ := ret[0].(*v1beta1.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultLastRun indicates an expected call of DefaultLastRun.
func (mr *MockRedisInterfaceMockRecorder) DefaultLastRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultLastRun", reflect.TypeOf((*MockRedisInterface)(nil).DefaultLastRun), arg0, arg1)
}

// PRLastRun mocks base method.
func (m *MockRedisInterface) PRLastRun(arg0 context.Context, arg1 types.NamespacedName, arg2 int) (*v1beta1.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PRLastRun", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1beta1.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PRLastRun indicates an expected call of PRLastRun.
func (mr *MockRedisInterfaceMockRecorder) PRLastRun(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PRLastRun", reflect.TypeOf((*MockRedisInterface)(nil).PRLastRun), arg0, arg1, arg2)
}

// SetDefaultApply mocks base method.
func (m *MockRedisInterface) SetDefaultApply(arg0 context.Context, arg1 *v1beta1.Run) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultApply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultApply indicates an expected call of SetDefaultApply.
func (mr *MockRedisInterfaceMockRecorder) SetDefaultApply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultApply", reflect.TypeOf((*MockRedisInterface)(nil).SetDefaultApply), arg0, arg1)
}

// SetDefaultLastRun mocks base method.
func (m *MockRedisInterface) SetDefaultLastRun(arg0 context.Context, arg1 *v1beta1.Run) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultLastRun", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultLastRun indicates an expected call of SetDefaultLastRun.
func (mr *MockRedisInterfaceMockRecorder) SetDefaultLastRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultLastRun", reflect.TypeOf((*MockRedisInterface)(nil).SetDefaultLastRun), arg0, arg1)
}

// SetPRLastRun mocks base method.
func (m *MockRedisInterface) SetPRLastRun(arg0 context.Context, arg1 *v1beta1.Run) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPRLastRun", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPRLastRun indicates an expected call of SetPRLastRun.
func (mr *MockRedisInterfaceMockRecorder) SetPRLastRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPRLastRun", reflect.TypeOf((*MockRedisInterface)(nil).SetPRLastRun), arg0, arg1)
}
