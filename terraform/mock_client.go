// Code generated by MockGen. DO NOT EDIT.
// Source: terraform/client.go

// Package terraform is a generated GoMock package.
package terraform

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientInterface is a mock of ClientInterface interface
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockClientInterface) Init(arg0 string, arg1 []string) (Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1)
	ret0, _ := ret[0].(Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init
func (mr *MockClientInterfaceMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockClientInterface)(nil).Init), arg0, arg1)
}

// Plan mocks base method
func (m *MockClientInterface) Plan(arg0 string) (Output, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plan", arg0)
	ret0, _ := ret[0].(Output)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Plan indicates an expected call of Plan
func (mr *MockClientInterfaceMockRecorder) Plan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockClientInterface)(nil).Plan), arg0)
}

// Apply mocks base method
func (m *MockClientInterface) Apply(arg0, arg1 string) (Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1)
	ret0, _ := ret[0].(Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply
func (mr *MockClientInterfaceMockRecorder) Apply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockClientInterface)(nil).Apply), arg0, arg1)
}

// Exec mocks base method
func (m *MockClientInterface) Exec(arg0 ...string) (*Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(*Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockClientInterfaceMockRecorder) Exec(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockClientInterface)(nil).Exec), arg0...)
}

// SetWorkingDir mocks base method
func (m *MockClientInterface) SetWorkingDir(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWorkingDir", arg0)
}

// SetWorkingDir indicates an expected call of SetWorkingDir
func (mr *MockClientInterfaceMockRecorder) SetWorkingDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkingDir", reflect.TypeOf((*MockClientInterface)(nil).SetWorkingDir), arg0)
}
