// Code generated by MockGen. DO NOT EDIT.
// Source: git/gitutil.go

// Package git is a generated GoMock package.
package git

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUtilInterface is a mock of UtilInterface interface
type MockUtilInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUtilInterfaceMockRecorder
}

// MockUtilInterfaceMockRecorder is the mock recorder for MockUtilInterface
type MockUtilInterfaceMockRecorder struct {
	mock *MockUtilInterface
}

// NewMockUtilInterface creates a new mock instance
func NewMockUtilInterface(ctrl *gomock.Controller) *MockUtilInterface {
	mock := &MockUtilInterface{ctrl: ctrl}
	mock.recorder = &MockUtilInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUtilInterface) EXPECT() *MockUtilInterfaceMockRecorder {
	return m.recorder
}

// HeadCommitLogForPaths mocks base method
func (m *MockUtilInterface) HeadCommitLogForPaths(args ...string) (string, error) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadCommitLogForPaths", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadCommitLogForPaths indicates an expected call of HeadCommitLogForPaths
func (mr *MockUtilInterfaceMockRecorder) HeadCommitLogForPaths(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadCommitLogForPaths", reflect.TypeOf((*MockUtilInterface)(nil).HeadCommitLogForPaths), args...)
}

// HeadHashForPaths mocks base method
func (m *MockUtilInterface) HeadHashForPaths(args ...string) (string, error) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadHashForPaths", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadHashForPaths indicates an expected call of HeadHashForPaths
func (mr *MockUtilInterfaceMockRecorder) HeadHashForPaths(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadHashForPaths", reflect.TypeOf((*MockUtilInterface)(nil).HeadHashForPaths), args...)
}
