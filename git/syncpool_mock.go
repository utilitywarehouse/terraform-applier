// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/utilitywarehouse/terraform-applier/git (interfaces: SyncInterface)

// Package git is a generated GoMock package.
package git

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSyncInterface is a mock of SyncInterface interface.
type MockSyncInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSyncInterfaceMockRecorder
}

// MockSyncInterfaceMockRecorder is the mock recorder for MockSyncInterface.
type MockSyncInterfaceMockRecorder struct {
	mock *MockSyncInterface
}

// NewMockSyncInterface creates a new mock instance.
func NewMockSyncInterface(ctrl *gomock.Controller) *MockSyncInterface {
	mock := &MockSyncInterface{ctrl: ctrl}
	mock.recorder = &MockSyncInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncInterface) EXPECT() *MockSyncInterfaceMockRecorder {
	return m.recorder
}

// AddRepository mocks base method.
func (m *MockSyncInterface) AddRepository(arg0 string, arg1 RepositoryConfig, arg2 *SyncOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepository indicates an expected call of AddRepository.
func (mr *MockSyncInterfaceMockRecorder) AddRepository(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepository", reflect.TypeOf((*MockSyncInterface)(nil).AddRepository), arg0, arg1, arg2)
}

// CloneLocal mocks base method.
func (m *MockSyncInterface) CloneLocal(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneLocal", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneLocal indicates an expected call of CloneLocal.
func (mr *MockSyncInterfaceMockRecorder) CloneLocal(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneLocal", reflect.TypeOf((*MockSyncInterface)(nil).CloneLocal), arg0, arg1, arg2, arg3, arg4)
}

// CopyPath mocks base method.
func (m *MockSyncInterface) CopyPath(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyPath", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyPath indicates an expected call of CopyPath.
func (mr *MockSyncInterfaceMockRecorder) CopyPath(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyPath", reflect.TypeOf((*MockSyncInterface)(nil).CopyPath), arg0, arg1, arg2, arg3)
}

// HasChangesForPath mocks base method.
func (m *MockSyncInterface) HasChangesForPath(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChangesForPath", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasChangesForPath indicates an expected call of HasChangesForPath.
func (mr *MockSyncInterfaceMockRecorder) HasChangesForPath(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChangesForPath", reflect.TypeOf((*MockSyncInterface)(nil).HasChangesForPath), arg0, arg1, arg2, arg3)
}

// HashForPath mocks base method.
func (m *MockSyncInterface) HashForPath(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashForPath", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashForPath indicates an expected call of HashForPath.
func (mr *MockSyncInterfaceMockRecorder) HashForPath(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashForPath", reflect.TypeOf((*MockSyncInterface)(nil).HashForPath), arg0, arg1, arg2)
}

// LogMsgForPath mocks base method.
func (m *MockSyncInterface) LogMsgForPath(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMsgForPath", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogMsgForPath indicates an expected call of LogMsgForPath.
func (mr *MockSyncInterfaceMockRecorder) LogMsgForPath(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMsgForPath", reflect.TypeOf((*MockSyncInterface)(nil).LogMsgForPath), arg0, arg1, arg2)
}

// Repository mocks base method.
func (m *MockSyncInterface) Repository(arg0 string) (*Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repository", arg0)
	ret0, _ := ret[0].(*Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Repository indicates an expected call of Repository.
func (mr *MockSyncInterfaceMockRecorder) Repository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockSyncInterface)(nil).Repository), arg0)
}

// RepositoryConfig mocks base method.
func (m *MockSyncInterface) RepositoryConfig(arg0 string) (RepositoryConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryConfig", arg0)
	ret0, _ := ret[0].(RepositoryConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryConfig indicates an expected call of RepositoryConfig.
func (mr *MockSyncInterfaceMockRecorder) RepositoryConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryConfig", reflect.TypeOf((*MockSyncInterface)(nil).RepositoryConfig), arg0)
}
