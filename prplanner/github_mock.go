// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/utilitywarehouse/terraform-applier/prplanner (interfaces: GithubInterface)

// Package prplanner is a generated GoMock package.
package prplanner

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGithubInterface is a mock of GithubInterface interface.
type MockGithubInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGithubInterfaceMockRecorder
}

// MockGithubInterfaceMockRecorder is the mock recorder for MockGithubInterface.
type MockGithubInterfaceMockRecorder struct {
	mock *MockGithubInterface
}

// NewMockGithubInterface creates a new mock instance.
func NewMockGithubInterface(ctrl *gomock.Controller) *MockGithubInterface {
	mock := &MockGithubInterface{ctrl: ctrl}
	mock.recorder = &MockGithubInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubInterface) EXPECT() *MockGithubInterfaceMockRecorder {
	return m.recorder
}

// openPRs mocks base method.
func (m *MockGithubInterface) openPRs(arg0 context.Context, arg1, arg2 string) ([]*pr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "openPRs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*pr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// openPRs indicates an expected call of openPRs.
func (mr *MockGithubInterfaceMockRecorder) openPRs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "openPRs", reflect.TypeOf((*MockGithubInterface)(nil).openPRs), arg0, arg1, arg2)
}

// postComment mocks base method.
func (m *MockGithubInterface) postComment(arg0, arg1 string, arg2, arg3 int, arg4 prComment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "postComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// postComment indicates an expected call of postComment.
func (mr *MockGithubInterfaceMockRecorder) postComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "postComment", reflect.TypeOf((*MockGithubInterface)(nil).postComment), arg0, arg1, arg2, arg3, arg4)
}
